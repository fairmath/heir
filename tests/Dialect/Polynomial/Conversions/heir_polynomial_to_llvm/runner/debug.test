// This is a helper template for debugging. To use it, run
// --polynomial-to-standard on the buggy test (e.g., lower_mul_1.mlir) and then
// paste the result into this file at the end
//
// cd tests/polynomial/runner
// bazel run //tools:heir-opt -- --polynomial-to-standard $PWD/tests/polynomial/runner/lower_mul_1.mlir >> debug.test
//
// Then insert calls to `printTensor32` or similar (maybe the dimension needs
// to be updated depending on the test or the desired print) and run with
//
// cd $(git rev-parse --show-toplevel)
// ./bazel-bin/tools/heir-opt tests/polynomial/runner/debug.test --heir-polynomial-to-llvm | ./bazel-bin/external/llvm-project/mlir/mlir-cpu-runner -e TEST_NAME -entry-point-result=void --shared-libs="bazel-bin/external/llvm-project/mlir/libmlir_c_runner_utils.so,bazel-bin/external/llvm-project/mlir/libmlir_runner_utils.so"
//
// Then inspect the debug statements to see where things went wrong.

func.func private @printMemrefI32(memref<*xi32>) attributes { llvm.emit_c_interface }

func.func private @printTensor23(%1: tensor<23xi128>) attributes {llvm.emit_c_interface} {
  %2 = arith.trunci %1 : tensor<23xi128> to tensor<23xi32>
  %3 = bufferization.to_memref %2 : memref<23xi32>
  %cast = memref.cast %3 : memref<23xi32> to memref<*xi32>
  call @printMemrefI32(%cast) : (memref<*xi32>) -> ()
  return
}

llvm.mlir.global internal constant @str_debug("DEBUG---\0A")
func.func private @printCString(!llvm.ptr<i8>) -> ()
func.func private @printDebug() -> () {
  %0 = llvm.mlir.addressof @str_debug : !llvm.ptr<array<9 x i8>>
  %1 = llvm.mlir.constant(0 : index) : i64
  %2 = llvm.getelementptr %0[%1, %1]
    : (!llvm.ptr<array<9 x i8>>, i64, i64) -> !llvm.ptr<i8>
  func.call @printCString(%2) : (!llvm.ptr<i8>) -> ()
  return
}

// INSERT_TEST_HERE
