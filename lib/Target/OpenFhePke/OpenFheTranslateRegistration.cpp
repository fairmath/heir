#include "lib/Target/OpenFhePke/OpenFheTranslateRegistration.h"

#include "lib/Dialect/LWE/IR/LWEDialect.h"
#include "lib/Dialect/Openfhe/IR/OpenfheDialect.h"
#include "lib/Target/OpenFhePke/OpenFhePkeEmitter.h"
#include "lib/Target/OpenFhePke/OpenFhePkeHeaderEmitter.h"
#include "lib/Target/OpenFhePke/OpenFheUtils.h"
#include "llvm/include/llvm/Support/CommandLine.h"      // from @llvm-project
#include "llvm/include/llvm/Support/ManagedStatic.h"    // from @llvm-project
#include "llvm/include/llvm/Support/raw_ostream.h"      // from @llvm-project
#include "mlir/include/mlir/Dialect/Arith/IR/Arith.h"   // from @llvm-project
#include "mlir/include/mlir/Dialect/Func/IR/FuncOps.h"  // from @llvm-project
#include "mlir/include/mlir/Dialect/Polynomial/IR/PolynomialDialect.h"  // from @llvm-project
#include "mlir/include/mlir/Dialect/Tensor/IR/Tensor.h"  // from @llvm-project
#include "mlir/include/mlir/IR/DialectRegistry.h"        // from @llvm-project
#include "mlir/include/mlir/IR/Operation.h"              // from @llvm-project
#include "mlir/include/mlir/IR/Value.h"                  // from @llvm-project
#include "mlir/include/mlir/Support/LLVM.h"              // from @llvm-project
#include "mlir/include/mlir/Tools/mlir-translate/Translation.h"  // from @llvm-project

namespace mlir {
namespace heir {
namespace openfhe {

struct TranslateOptions {
  llvm::cl::opt<mlir::heir::openfhe::OpenfheScheme> openfheScheme{
      "openfhe-scheme", llvm::cl::desc("The OpenFHE scheme API to use"),
      llvm::cl::init(mlir::heir::openfhe::OpenfheScheme::BGV),
      llvm::cl::values(clEnumValN(mlir::heir::openfhe::OpenfheScheme::BGV,
                                  "bgv", "Emit with OpenFHE BGV scheme"),
                       clEnumValN(mlir::heir::openfhe::OpenfheScheme::CKKS,
                                  "ckks", "Emit with OpenFHE CKKS scheme"))};
};
static llvm::ManagedStatic<TranslateOptions> options;

void registerTranslateOptions() {
  // Forces initialization of options.
  *options;
}

void registerToOpenFhePkeTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke",
      "translate the openfhe dialect to C++ code against the OpenFHE pke API",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePke(op, output, options->openfheScheme);
      },
      [](DialectRegistry &registry) {
        registry.insert<arith::ArithDialect, func::FuncDialect,
                        openfhe::OpenfheDialect, lwe::LWEDialect,
                        ::mlir::polynomial::PolynomialDialect,
                        tensor::TensorDialect>();
      });
}

void registerToOpenFhePkeHeaderTranslation() {
  TranslateFromMLIRRegistration reg(
      "emit-openfhe-pke-header",
      "Emit a header corresponding to the C++ file generated by "
      "--emit-openfhe-pke",
      [](Operation *op, llvm::raw_ostream &output) {
        return translateToOpenFhePkeHeader(op, output, options->openfheScheme);
      },
      [](DialectRegistry &registry) {
        registry
            .insert<arith::ArithDialect, func::FuncDialect,
                    tensor::TensorDialect, openfhe::OpenfheDialect,
                    lwe::LWEDialect, ::mlir::polynomial::PolynomialDialect>();
      });
}

}  // namespace openfhe
}  // namespace heir
}  // namespace mlir
